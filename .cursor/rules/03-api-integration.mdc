---
description: 
globs: 
alwaysApply: false
---
# API Integration

This application supports integration with various OpenAI-compatible AI APIs.

## API Endpoint

- [app/api/chat/route.ts](mdc:lite-llm-chatbot/app/api/chat/route.ts) - Implementation of the chat API endpoint
  - Handles POST requests with message history
  - Connects to configured AI service
  - Streams responses back to the client
  - Implements error handling

## Configuration

- [app/config.ts](mdc:lite-llm-chatbot/app/config.ts) - Stores API configuration:
  - API keys
  - Base URLs
  - Model names

## Client-Side Integration

- [app/hooks/useChat.ts](mdc:lite-llm-chatbot/app/hooks/useChat.ts) - Client-side API interaction:
  - Sends requests to the API endpoint
  - Handles streaming responses
  - Manages error states
  - Updates UI with response data

## Settings UI

- [app/components/ChatSettings.tsx](mdc:lite-llm-chatbot/app/components/ChatSettings.tsx) - User interface for:
  - Selecting API providers
  - Entering API keys
  - Configuring model parameters
  - Saving preferences

## API Compatibility

- The application is currently set up to use Dashscope (Alibaba Cloud's AI service) with OpenAI-compatible endpoints
- It uses the OpenAI JS SDK but with a custom `baseURL` pointing to Dashscope

## Key Code

In [app/api/chat/route.ts](mdc:lite-llm-chatbot/app/api/chat/route.ts):

```typescript
const openai = new OpenAI({
  apiKey: config.dashscopeApiKey,
  baseURL: "https://dashscope.aliyuncs.com/compatible-mode/v1",
});
```

## Environment Variables

Required in `.env.local`:
- `DASH_SCOPE_API_KEY` - API key for Dashscope
- `OPENAI_API_KEY` - Optional, if you want to switch to OpenAI

## Model Configuration

Current configuration uses:
- Model: `qwen-plus` (Alibaba's model)
- Temperature: 0.7
- Max tokens: 500
